SET(OPENAL_SEARCH_PATHS
    ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/lib
    ${POLYCODE_RELEASE_DIR}/Framework/Core/Dependencies/include/AL
    )

SET(MSVC_YEAR_NAME)
IF(MSVC_VERSION GREATER 1599) # >= 1600
    SET(MSVC_YEAR_NAME VS2010)
ELSEIF(MSVC_VERSION GREATER 1499) # >= 1500
    SET(MSVC_YEAR_NAME VS2008)
ELSEIF(MSVC_VERSION GREATER 1399)
    SET(MSVC_YEAR_NAME VS2005)
ELSEIF(MSVC_VERSION GREATER 1299)
    SET(MSVC_YEAR_NAME VS2003)
ELSEIF(MSVC_VERSION GREATER 1199)
    SET(MSVC_YEAR_NAME VS6)
ENDIF()

FIND_PATH(OPENAL_INCLUDE_DIR
    NAMES al.h alc.h alext.h efx-creative.h efx-presets.h efx.h
    HINTS
    $ENV{OPENALDIR}
    $ENV{OPENAL_PATH}
    PATH_SUFFIXES include
    PATHS ${OPENAL_SEARCH_PATHS}
    )

FIND_LIBRARY(OPENAL_LIBRARY
    NAMES libopenal
    HINTS
    NO_DEFAULT_PATH
    NO_CMAKE_ENVIRONMENT_PATH
    NO_SYSTEM_ENVIRONMENT_PATH
    NO_CMAKE_PATH
    NO_CMAKE_SYSTEM_PATH
    $ENV{OPENALDIR}
    $ENV{OPENAL_PATH}
    PATH_SUFFIXES lib lib64 "Win32/${MSVC_YEAR_NAME}/x64/Release" "Win32/${MSVC_YEAR_NAME}/Win32/Release"
    PATHS ${OPENAL_SEARCH_PATHS}
    )

FIND_LIBRARY(OPENAL_LIBRARY_DEBUG
    NAMES libopenald libopenal_d openald openal_d
    HINTS
    NO_DEFAULT_PATH
    NO_CMAKE_ENVIRONMENT_PATH
    NO_CMAKE_SYSTEM_PATH
    NO_SYSTEM_ENVIRONMENT_PATH
    NO_CMAKE_PATH
    $ENV{OPENALDIR}
    $ENV{OPENAL_PATH}
    PATH_SUFFIXES lib lib64 "Win32/${MSVC_YEAR_NAME}/x64/Debug" "Win32/${MSVC_YEAR_NAME}/Win32/Debug"
    PATHS ${OPENAL_SEARCH_PATHS}
    )

IF(NOT OPENAL_LIBRARY_DEBUG)
	MESSAGE("STILL CANT FIND OPENAL_LIBRARY_DEBUG - ATTEMPTING TO SEARECH NON-SUFFIXED LIBRARIES")
    FIND_LIBRARY(OPENAL_LIBRARY_DEBUG
        NAMES libopenald libopenal_d
        HINTS
        NO_DEFAULT_PATH
        NO_CMAKE_ENVIRONMENT_PATH
        NO_CMAKE_SYSTEM_PATH
        NO_SYSTEM_ENVIRONMENT_PATH
        NO_CMAKE_PATH
        CMAKE_FIND_FRAMEWORK NEVER
        $ENV{OPENALDIR}
        $ENV{OPENAL_PATH}
        PATH_SUFFIXES "Win32/${MSVC_YEAR_NAME}/x64/Debug" "Win32/${MSVC_YEAR_NAME}/Win32/Debug"
        PATHS ${OPENAL_SEARCH_PATHS}
        )
ENDIF()

IF(OPENAL_LIBRARY)
    IF(OPENAL_LIBRARY_DEBUG)
        SET(OPENAL_LIBRARIES optimized "${OPENAL_LIBRARY}" debug "${OPENAL_LIBRARY_DEBUG}")
    ELSE()
        SET(OPENAL_LIBRARIES "${OPENAL_LIBRARY}")
    ENDIF()
ELSEIF(OPENAL_LIBRARY_DEBUG)
    SET(OPENAL_LIBRARIES debug "${OPENAL_LIBRARY_DEBUG}")
ENDIF()

# handle the QUIETLY and REQUIRED arguments and set XXX_FOUND to TRUE if all listed variables are TRUE
INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(OPENAL DEFAULT_MSG OPENAL_LIBRARIES OPENAL_INCLUDE_DIR)
